<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:mvc="http://www.springframework.org/schema/mvc"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
                        http://www.springframework.org/schema/beans/spring-beans.xsd
                        http://www.springframework.org/schema/context
                        http://www.springframework.org/schema/context/spring-context.xsd
                        http://www.springframework.org/schema/mvc
                        http://www.springframework.org/schema/mvc/spring-mvc.xsd">
    <!--=========

    springMVC配置文件，包含跳转逻辑控制、配置
    1、扫描装载Controller包
    2、配置视图解析器
    3、两个标准配置：
        1)配置静态资源；2)映射动态请求

    ==========-->

    <!--
        自动扫描该包，使SpringMVC认为包下用了@Controller注解的类是控制器。

        use-default-filters：默认的Filter对标有@Service,@Controller和@Repository的注解的类进行扫描，
                            SpringMVC只来控制网站的跳转逻辑，
                            所以只希望SpringMVC的配置扫描@Controllerce注解标注的类
    -->
    <context:component-scan base-package="com.darkbright.frameworks" use-default-filters="false">
        <!--只扫描注解控制器@Controller-->
        <context:include-filter type="annotation" expression="org.springframework.stereotype.Controller"/>
    </context:component-scan>

    <!-- 配置视图解析器，定义跳转的文件的前后缀 ，视图模式配置 -->
    <bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
        <!--这里的配置我的理解是自动给后面action的方法return的字符串加上前缀和后缀，变成一个 可用的url地址 -->
        <property name="prefix" value="/WEB-INF/view/"/>
        <property name="suffix" value=".jsp"/>
    </bean>

    <!--两个标准配置-->
    <!-- 将SpringMVC不能处理的请求交给tomcat，静态页面，如html,css,js,images可以访问 -->
    <mvc:default-servlet-handler/>
    <!--
        开启注解。映射动态请求，注解驱动，以使得访问路径与方法的匹配可以通过注解配置
        支持更高级的功能，如JSR303校验，快捷的ajax...
    -->
    <mvc:annotation-driven/>


    <!--避免IE执行AJAX时，返回JSON出现下载文件
    <bean class="org.springframework.web.servlet.mvc.annotation.AnnotationMethodHandlerAdapter">
        <property name="messageConverters">
            <list>
                <bean class="org.springframework.http.converter.ByteArrayHttpMessageConverter"/>
                <ref bean="stringHttpMessageConverter"/>
                <ref bean="jsonHttpMessageConverter"/>
            </list>
        </property>
    </bean>

    <bean id="stringHttpMessageConverter"
          class="org.springframework.http.converter.StringHttpMessageConverter">
        <property name="supportedMediaTypes">
            <list>
                <value>text/plain;charset=UTF-8</value>
                <value>text/html;charset=UTF-8</value>
                <value>application/x-www-form-urlencoded;charset=UTF-8</value>
                <value>application/json;charset=UTF-8</value>
            </list>
        </property>
    </bean>
    <bean id="jsonHttpMessageConverter"
          class="org.springframework.http.converter.json.MappingJackson2HttpMessageConverter">
        <property name="supportedMediaTypes">
            <list>
                <value>text/plain;charset=UTF-8</value>
                <value>text/html;charset=UTF-8</value>
                <value>application/x-www-form-urlencoded;charset=UTF-8</value>
                <value>application/json;charset=UTF-8</value>
            </list>
        </property>
    </bean>



     配置文件上传，如果没有使用文件上传可以不用配置，当然如果不配，那么配置文件中也不必引入上传组件包
    <bean id="multipartResolver"
          class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
         默认编码
        <property name="defaultEncoding" value="utf-8"/>
        <property name="maxUploadSize" value="20480000"/>
         设置在文件上传时允许写到内存中的最大值，以字节为单位计算，默认是10240
         内存中的最大值，但是经实验，上传文件大小若小于此参数，则不会生成临时文件，故改为2048
        <property name="maxInMemorySize" value="2048"/>
    </bean>

     全局异常处理器，异常处理类
    <bean id="handlerExceptionResolver" class="com.darkbright.frameworks.basic.exception.CustomExceptionResolver"></bean>
-->
</beans>  